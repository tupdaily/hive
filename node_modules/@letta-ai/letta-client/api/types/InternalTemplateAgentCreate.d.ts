/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Letta from "../index";
/**
 * Used for Letta Cloud
 */
export interface InternalTemplateAgentCreate {
    /** The name of the agent. */
    name?: string;
    /** The blocks to create in the agent's in-context memory. */
    memoryBlocks?: Letta.CreateBlock[];
    /** The tools used by the agent. */
    tools?: string[];
    /** The ids of the tools used by the agent. */
    toolIds?: string[];
    /** The ids of the sources used by the agent. */
    sourceIds?: string[];
    /** The ids of the blocks used by the agent. */
    blockIds?: string[];
    /** The tool rules governing the agent. */
    toolRules?: Letta.InternalTemplateAgentCreateToolRulesItem[];
    /** The tags associated with the agent. */
    tags?: string[];
    /** The system prompt used by the agent. */
    system?: string;
    /** The type of agent. */
    agentType?: Letta.AgentType;
    /** The LLM configuration used by the agent. */
    llmConfig?: Letta.LlmConfig;
    /** The embedding configuration used by the agent. */
    embeddingConfig?: Letta.EmbeddingConfig;
    /** The initial set of messages to put in the agent's in-context memory. */
    initialMessageSequence?: Letta.MessageCreate[];
    /** If true, attaches the Letta core tools (e.g. core_memory related functions). */
    includeBaseTools?: boolean;
    /** If true, attaches the Letta multi-agent tools (e.g. sending a message to another agent). */
    includeMultiAgentTools?: boolean;
    /** If true, attaches the Letta base tool rules (e.g. deny all tools not explicitly allowed). */
    includeBaseToolRules?: boolean;
    /** If true, automatically creates and attaches a default data source for this agent. */
    includeDefaultSource?: boolean;
    /** The description of the agent. */
    description?: string;
    /** The metadata of the agent. */
    metadata?: Record<string, unknown>;
    /** The LLM configuration handle used by the agent, specified in the format provider/model-name, as an alternative to specifying llm_config. */
    model?: string;
    /** The embedding configuration handle used by the agent, specified in the format provider/model-name. */
    embedding?: string;
    /** The context window limit used by the agent. */
    contextWindowLimit?: number;
    /** The embedding chunk size used by the agent. */
    embeddingChunkSize?: number;
    /** The maximum number of tokens to generate, including reasoning step. If not set, the model will use its default value. */
    maxTokens?: number;
    /** The maximum number of tokens to generate for reasoning step. If not set, the model will use its default value. */
    maxReasoningTokens?: number;
    /** Whether to enable internal extended thinking step for a reasoner model. */
    enableReasoner?: boolean;
    /** Whether to enable reasoning for this agent. */
    reasoning?: boolean;
    /** Deprecated: please use the 'create agents from a template' endpoint instead. */
    fromTemplate?: string;
    /** Deprecated: No longer used */
    template?: boolean;
    /** Deprecated: Project should now be passed via the X-Project header instead of in the request body. If using the sdk, this can be done via the new x_project field below. */
    project?: string;
    /** Deprecated: use `secrets` field instead. */
    toolExecEnvironmentVariables?: Record<string, string | undefined>;
    /** The environment variables for tool execution specific to this agent. */
    secrets?: Record<string, string | undefined>;
    /** The variables that should be set for the agent. */
    memoryVariables?: Record<string, string | undefined>;
    /** The id of the project the agent belongs to. */
    projectId?: string;
    /** The id of the template. */
    templateId: string;
    /** The id of the base template. */
    baseTemplateId: string;
    /** The ids of the identities associated with this agent. */
    identityIds?: string[];
    /** If set to True, the agent will not remember previous messages (though the agent will still retain state via core memory blocks and archival/recall memory). Not recommended unless you have an advanced use case. */
    messageBufferAutoclear?: boolean;
    /** If set to True, memory management will move to a background agent thread. */
    enableSleeptime?: boolean;
    /** The response format for the agent. */
    responseFormat?: Letta.InternalTemplateAgentCreateResponseFormat;
    /** The timezone of the agent (IANA format). */
    timezone?: string;
    /** Maximum number of files that can be open at once for this agent. Setting this too high may exceed the context window, which will break the agent. */
    maxFilesOpen?: number;
    /** The per-file view window character limit for this agent. Setting this too high may exceed the context window, which will break the agent. */
    perFileViewWindowCharLimit?: number;
    /** If set to True, the agent will be hidden. */
    hidden?: boolean;
    /** If set to True, enables parallel tool calling. Defaults to False. */
    parallelToolCalls?: boolean;
    /** The id of the deployment. */
    deploymentId: string;
    /** The id of the entity within the template. */
    entityId: string;
}
