/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace Archives {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Archives {
    protected readonly _options: Archives.Options;
    constructor(_options?: Archives.Options);
    /**
     * Get a list of all archives for the current organization with optional filters and pagination.
     *
     * @param {Letta.ListArchivesRequest} request
     * @param {Archives.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.archives.listArchives({
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         name: "name",
     *         agentId: "agent_id"
     *     })
     */
    listArchives(request?: Letta.ListArchivesRequest, requestOptions?: Archives.RequestOptions): core.HttpResponsePromise<Letta.Archive[]>;
    private __listArchives;
    /**
     * Create a new archive.
     *
     * @param {Letta.ArchiveCreateRequest} request
     * @param {Archives.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.archives.createArchive({
     *         name: "name"
     *     })
     */
    createArchive(request: Letta.ArchiveCreateRequest, requestOptions?: Archives.RequestOptions): core.HttpResponsePromise<Letta.Archive>;
    private __createArchive;
    /**
     * Update an existing archive's name and/or description.
     *
     * @param {string} archiveId - The ID of the archive in the format 'archive-<uuid4>'
     * @param {Letta.ArchiveUpdateRequest} request
     * @param {Archives.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.archives.modifyArchive("archive-123e4567-e89b-42d3-8456-426614174000")
     */
    modifyArchive(archiveId: string, request?: Letta.ArchiveUpdateRequest, requestOptions?: Archives.RequestOptions): core.HttpResponsePromise<Letta.Archive>;
    private __modifyArchive;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
