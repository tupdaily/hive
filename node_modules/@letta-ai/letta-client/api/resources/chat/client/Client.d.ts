/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace Chat {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Chat {
    protected readonly _options: Chat.Options;
    constructor(_options?: Chat.Options);
    /**
     * Create a chat completion using a Letta agent (OpenAI-compatible).
     *
     * This endpoint provides full OpenAI API compatibility. The agent is selected based on:
     * - The 'model' parameter in the request (should contain an agent ID in format 'agent-...')
     *
     * When streaming is enabled (stream=true), the response will be Server-Sent Events
     * with ChatCompletionChunk objects.
     *
     * @param {Letta.ChatCompletionRequest} request
     * @param {Chat.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.chat.createChatCompletion({
     *         model: "model",
     *         messages: [{
     *                 content: "content",
     *                 role: "developer"
     *             }]
     *     })
     */
    createChatCompletion(request: Letta.ChatCompletionRequest, requestOptions?: Chat.RequestOptions): core.HttpResponsePromise<Letta.ChatCompletion>;
    private __createChatCompletion;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
