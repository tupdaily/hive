/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Passages {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Passages {
    protected readonly _options: Passages.Options;
    constructor(_options?: Passages.Options);
    /**
     * List all passages associated with a data source.
     *
     * @param {string} sourceId - The ID of the source in the format 'source-<uuid4>'
     * @param {Letta.sources.PassagesListRequest} request
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.passages.list("source-123e4567-e89b-42d3-8456-426614174000", {
     *         after: "after",
     *         before: "before",
     *         limit: 1
     *     })
     */
    list(sourceId: string, request?: Letta.sources.PassagesListRequest, requestOptions?: Passages.RequestOptions): core.HttpResponsePromise<Letta.Passage[]>;
    private __list;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
