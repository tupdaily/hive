/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import { Agents } from "../resources/agents/client/Client";
export declare namespace Templates {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Templates {
    protected readonly _options: Templates.Options;
    protected _agents: Agents | undefined;
    constructor(_options?: Templates.Options);
    get agents(): Agents;
    /**
     * Creates an Agent or multiple Agents from a template
     *
     * @param {string} projectId - The project id
     * @param {string} templateVersion - The template version, formatted as {template-name}:{version-number} or {template-name}:latest
     * @param {Letta.TemplatesCreateAgentsFromTemplateRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.PaymentRequiredError}
     *
     * @example
     *     await client.templates.createagentsfromtemplate("project_id", "template_version")
     */
    createagentsfromtemplate(projectId: string, templateVersion: string, request?: Letta.TemplatesCreateAgentsFromTemplateRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesCreateAgentsFromTemplateResponse>;
    private __createagentsfromtemplate;
    /**
     * List all templates
     *
     * @param {Letta.TemplatesListRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.templates.list({
     *         offset: "offset",
     *         exact: "exact",
     *         limit: "limit",
     *         version: "version",
     *         templateId: "template_id",
     *         name: "name",
     *         search: "search",
     *         projectSlug: "project_slug",
     *         projectId: "project_id",
     *         sortBy: "updated_at"
     *     })
     */
    list(request?: Letta.TemplatesListRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesListResponse>;
    private __list;
    /**
     * Saves the current version of the template as a new version
     *
     * @param {string} projectId - The project id
     * @param {string} templateName - The template version, formatted as {template-name}, any version appended will be ignored
     * @param {Letta.TemplatesSaveTemplateVersionRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     *
     * @example
     *     await client.templates.savetemplateversion("project_id", "template_name")
     */
    savetemplateversion(projectId: string, templateName: string, request?: Letta.TemplatesSaveTemplateVersionRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesSaveTemplateVersionResponse>;
    private __savetemplateversion;
    /**
     * Deletes all versions of a template with the specified name
     *
     * @param {string} projectId - The project id
     * @param {string} templateName - The template name (without version)
     * @param {Letta.TemplatesDeleteTemplateRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.NotFoundError}
     *
     * @example
     *     await client.templates.deletetemplate("project_id", "template_name")
     */
    deletetemplate(projectId: string, templateName: string, request?: Letta.TemplatesDeleteTemplateRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesDeleteTemplateResponse>;
    private __deletetemplate;
    /**
     * Get a snapshot of the template version, this will return the template state at a specific version
     *
     * @param {string} projectId - The project id
     * @param {string} templateVersion - The template version, formatted as {template-name}:{version-number} or {template-name}:latest
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.templates.gettemplatesnapshot("project_id", "template_version")
     */
    gettemplatesnapshot(projectId: string, templateVersion: string, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesGetTemplateSnapshotResponse>;
    private __gettemplatesnapshot;
    /**
     * Updates the current working version of a template from a snapshot
     *
     * @param {string} projectId - The project id
     * @param {string} templateVersion - The template name with :dev version (e.g., my-template:dev)
     * @param {unknown} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     * @throws {@link Letta.NotFoundError}
     * @throws {@link Letta.InternalServerError}
     *
     * @example
     *     await client.templates.setcurrenttemplatefromsnapshot("project_id", "template_version", {
     *         "key": "value"
     *     })
     */
    setcurrenttemplatefromsnapshot(projectId: string, templateVersion: string, request?: unknown, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesSetCurrentTemplateFromSnapshotResponse>;
    private __setcurrenttemplatefromsnapshot;
    /**
     * Forks a template version into a new template
     *
     * @param {string} projectId - The project id
     * @param {string} templateVersion - The template version, formatted as {template-name}:{version-number} or {template-name}:latest
     * @param {Letta.TemplatesForkTemplateRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     *
     * @example
     *     await client.templates.forktemplate("project_id", "template_version")
     */
    forktemplate(projectId: string, templateVersion: string, request?: Letta.TemplatesForkTemplateRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesForkTemplateResponse>;
    private __forktemplate;
    /**
     * Creates a new template from an existing agent or agent file
     *
     * @param {string} projectId - The project id
     * @param {Letta.TemplatesCreateTemplateRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     *
     * @example
     *     await client.templates.createtemplate("project_id", {
     *         type: "agent",
     *         agentId: "agent_id"
     *     })
     */
    createtemplate(projectId: string, request: Letta.TemplatesCreateTemplateRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesCreateTemplateResponse>;
    private __createtemplate;
    /**
     * Renames all versions of a template with the specified name. Versions are automatically stripped from the current template name if accidentally included.
     *
     * @param {string} projectId - The project id
     * @param {string} templateName - The current template name (version will be automatically stripped if included)
     * @param {Letta.TemplatesRenameTemplateRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     * @throws {@link Letta.NotFoundError}
     * @throws {@link Letta.ConflictError}
     *
     * @example
     *     await client.templates.renametemplate("project_id", "template_name", {
     *         newName: "new_name"
     *     })
     */
    renametemplate(projectId: string, templateName: string, request: Letta.TemplatesRenameTemplateRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesRenameTemplateResponse>;
    private __renametemplate;
    /**
     * Updates the description for all versions of a template with the specified name. Versions are automatically stripped from the current template name if accidentally included.
     *
     * @param {string} projectId - The project id
     * @param {string} templateName - The template name (version will be automatically stripped if included)
     * @param {Letta.TemplatesUpdateTemplateDescriptionRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     * @throws {@link Letta.NotFoundError}
     *
     * @example
     *     await client.templates.updatetemplatedescription("project_id", "template_name")
     */
    updatetemplatedescription(projectId: string, templateName: string, request?: Letta.TemplatesUpdateTemplateDescriptionRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesUpdateTemplateDescriptionResponse>;
    private __updatetemplatedescription;
    /**
     * List all versions of a specific template
     *
     * @param {string} projectId - The project id
     * @param {string} name - The template name (without version)
     * @param {Letta.TemplatesListTemplateVersionsRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.NotFoundError}
     *
     * @example
     *     await client.templates.listtemplateversions("project_id", "name", {
     *         offset: "offset",
     *         limit: "limit"
     *     })
     */
    listtemplateversions(projectId: string, name: string, request?: Letta.TemplatesListTemplateVersionsRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesListTemplateVersionsResponse>;
    private __listtemplateversions;
    /**
     * Migrates a deployment to a specific template version
     *
     * @param {string} projectId - The project id
     * @param {string} templateName - The template name (without version)
     * @param {string} deploymentId - The deployment ID to migrate
     * @param {Letta.TemplatesMigrateDeploymentRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     * @throws {@link Letta.NotFoundError}
     * @throws {@link Letta.InternalServerError}
     *
     * @example
     *     await client.templates.migratedeployment("project_id", "template_name", "deployment_id", {
     *         version: "version"
     *     })
     */
    migratedeployment(projectId: string, templateName: string, deploymentId: string, request: Letta.TemplatesMigrateDeploymentRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesMigrateDeploymentResponse>;
    private __migratedeployment;
    /**
     * Updates the current working version of a template from an agent file
     *
     * @param {string} projectId - The project id
     * @param {string} templateName - The template name (without version)
     * @param {Letta.TemplatesUpdateCurrentTemplateFromAgentFileRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     * @throws {@link Letta.NotFoundError}
     * @throws {@link Letta.InternalServerError}
     *
     * @example
     *     await client.templates.updatecurrenttemplatefromagentfile("project_id", "template_name", {
     *         agentFileJson: {
     *             "key": "value"
     *         }
     *     })
     */
    updatecurrenttemplatefromagentfile(projectId: string, templateName: string, request: Letta.TemplatesUpdateCurrentTemplateFromAgentFileRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Letta.TemplatesUpdateCurrentTemplateFromAgentFileResponse>;
    private __updatecurrenttemplatefromagentfile;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
