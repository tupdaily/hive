/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import { Messages } from "../resources/messages/client/Client";
export declare namespace Groups {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Groups {
    protected readonly _options: Groups.Options;
    protected _messages: Messages | undefined;
    constructor(_options?: Groups.Options);
    get messages(): Messages;
    /**
     * Fetch all multi-agent groups matching query.
     *
     * @param {Letta.GroupsListRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.list({
     *         managerType: "round_robin",
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at",
     *         projectId: "project_id"
     *     })
     */
    list(request?: Letta.GroupsListRequest, requestOptions?: Groups.RequestOptions): core.HttpResponsePromise<Letta.Group[]>;
    private __list;
    /**
     * Create a new multi-agent group with the specified configuration.
     *
     * @param {Letta.GroupCreate} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.create({
     *         agentIds: ["agent_ids"],
     *         description: "description"
     *     })
     */
    create(request: Letta.GroupCreate, requestOptions?: Groups.RequestOptions): core.HttpResponsePromise<Letta.Group>;
    private __create;
    /**
     * Get the count of all groups associated with a given user.
     *
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.count()
     */
    count(requestOptions?: Groups.RequestOptions): core.HttpResponsePromise<number>;
    private __count;
    /**
     * Retrieve the group by id.
     *
     * @param {string} groupId - The ID of the group in the format 'group-<uuid4>'
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.retrieve("group-123e4567-e89b-42d3-8456-426614174000")
     */
    retrieve(groupId: string, requestOptions?: Groups.RequestOptions): core.HttpResponsePromise<Letta.Group>;
    private __retrieve;
    /**
     * Delete a multi-agent group.
     *
     * @param {string} groupId - The ID of the group in the format 'group-<uuid4>'
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.delete("group-123e4567-e89b-42d3-8456-426614174000")
     */
    delete(groupId: string, requestOptions?: Groups.RequestOptions): core.HttpResponsePromise<unknown>;
    private __delete;
    /**
     * Create a new multi-agent group with the specified configuration.
     *
     * @param {string} groupId - The ID of the group in the format 'group-<uuid4>'
     * @param {Letta.GroupUpdate} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.modify("group-123e4567-e89b-42d3-8456-426614174000")
     */
    modify(groupId: string, request?: Letta.GroupUpdate, requestOptions?: Groups.RequestOptions): core.HttpResponsePromise<Letta.Group>;
    private __modify;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
