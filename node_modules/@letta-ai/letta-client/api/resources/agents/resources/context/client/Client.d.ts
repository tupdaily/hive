/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Context {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Context {
    protected readonly _options: Context.Options;
    constructor(_options?: Context.Options);
    /**
     * Retrieve the context window of a specific agent.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Context.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.context.retrieve("agent-123e4567-e89b-42d3-8456-426614174000")
     */
    retrieve(agentId: string, requestOptions?: Context.RequestOptions): core.HttpResponsePromise<Letta.ContextWindowOverview>;
    private __retrieve;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
