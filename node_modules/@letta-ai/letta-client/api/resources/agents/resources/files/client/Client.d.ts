/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Files {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Files {
    protected readonly _options: Files.Options;
    constructor(_options?: Files.Options);
    /**
     * Closes all currently open files for a given agent.
     *
     * This endpoint updates the file state for the agent so that no files are marked as open.
     * Typically used to reset the working memory view for the agent.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.files.closeAll("agent-123e4567-e89b-42d3-8456-426614174000")
     */
    closeAll(agentId: string, requestOptions?: Files.RequestOptions): core.HttpResponsePromise<string[]>;
    private __closeAll;
    /**
     * Opens a specific file for a given agent.
     *
     * This endpoint marks a specific file as open in the agent's file state.
     * The file will be included in the agent's working memory view.
     * Returns a list of file names that were closed due to LRU eviction.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {string} fileId - The ID of the file in the format 'file-<uuid4>'
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.files.open("agent-123e4567-e89b-42d3-8456-426614174000", "file-123e4567-e89b-42d3-8456-426614174000")
     */
    open(agentId: string, fileId: string, requestOptions?: Files.RequestOptions): core.HttpResponsePromise<string[]>;
    private __open;
    /**
     * Closes a specific file for a given agent.
     *
     * This endpoint marks a specific file as closed in the agent's file state.
     * The file will be removed from the agent's working memory view.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {string} fileId - The ID of the file in the format 'file-<uuid4>'
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.files.close("agent-123e4567-e89b-42d3-8456-426614174000", "file-123e4567-e89b-42d3-8456-426614174000")
     */
    close(agentId: string, fileId: string, requestOptions?: Files.RequestOptions): core.HttpResponsePromise<unknown>;
    private __close;
    /**
     * Get the files attached to an agent with their open/closed status (paginated).
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.FilesListRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.files.list("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at",
     *         cursor: "cursor",
     *         isOpen: true
     *     })
     */
    list(agentId: string, request?: Letta.agents.FilesListRequest, requestOptions?: Files.RequestOptions): core.HttpResponsePromise<Letta.PaginatedAgentFiles>;
    private __list;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
