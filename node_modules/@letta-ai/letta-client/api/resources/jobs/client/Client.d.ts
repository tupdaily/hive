/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace Jobs {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Jobs {
    protected readonly _options: Jobs.Options;
    constructor(_options?: Jobs.Options);
    /**
     * List all jobs.
     *
     * @param {Letta.JobsListRequest} request
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.list({
     *         sourceId: "source_id",
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at",
     *         active: true,
     *         ascending: true
     *     })
     */
    list(request?: Letta.JobsListRequest, requestOptions?: Jobs.RequestOptions): core.HttpResponsePromise<Letta.Job[]>;
    private __list;
    /**
     * List all active jobs.
     *
     * @param {Letta.JobsListActiveRequest} request
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.listActive({
     *         sourceId: "source_id",
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         ascending: true
     *     })
     */
    listActive(request?: Letta.JobsListActiveRequest, requestOptions?: Jobs.RequestOptions): core.HttpResponsePromise<Letta.Job[]>;
    private __listActive;
    /**
     * Get the status of a job.
     *
     * @param {string} jobId - The ID of the job in the format 'job-<uuid4>'
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.retrieve("job-123e4567-e89b-42d3-8456-426614174000")
     */
    retrieve(jobId: string, requestOptions?: Jobs.RequestOptions): core.HttpResponsePromise<Letta.Job>;
    private __retrieve;
    /**
     * Delete a job by its job_id.
     *
     * @param {string} jobId - The ID of the job in the format 'job-<uuid4>'
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.delete("job-123e4567-e89b-42d3-8456-426614174000")
     */
    delete(jobId: string, requestOptions?: Jobs.RequestOptions): core.HttpResponsePromise<Letta.Job>;
    private __delete;
    /**
     * Cancel a job by its job_id.
     *
     * This endpoint marks a job as cancelled, which will cause any associated
     * agent execution to terminate as soon as possible.
     *
     * @param {string} jobId - The ID of the job in the format 'job-<uuid4>'
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.cancelJob("job-123e4567-e89b-42d3-8456-426614174000")
     */
    cancelJob(jobId: string, requestOptions?: Jobs.RequestOptions): core.HttpResponsePromise<Letta.Job>;
    private __cancelJob;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
