"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LettaSchemasAgentFileAgentSchema = void 0;
const core = __importStar(require("../../core"));
const CreateBlock_1 = require("./CreateBlock");
const LettaSchemasAgentFileAgentSchemaToolRulesItem_1 = require("./LettaSchemasAgentFileAgentSchemaToolRulesItem");
const AgentType_1 = require("./AgentType");
const LlmConfig_1 = require("./LlmConfig");
const EmbeddingConfig_1 = require("./EmbeddingConfig");
const MessageCreate_1 = require("./MessageCreate");
const LettaSchemasAgentFileAgentSchemaResponseFormat_1 = require("./LettaSchemasAgentFileAgentSchemaResponseFormat");
const LettaSchemasAgentFileMessageSchema_1 = require("./LettaSchemasAgentFileMessageSchema");
const FileAgentSchema_1 = require("./FileAgentSchema");
exports.LettaSchemasAgentFileAgentSchema = core.serialization.object({
    name: core.serialization.string().optional(),
    memoryBlocks: core.serialization.property("memory_blocks", core.serialization.list(CreateBlock_1.CreateBlock).optional()),
    tools: core.serialization.list(core.serialization.string()).optional(),
    toolIds: core.serialization.property("tool_ids", core.serialization.list(core.serialization.string()).optional()),
    sourceIds: core.serialization.property("source_ids", core.serialization.list(core.serialization.string()).optional()),
    blockIds: core.serialization.property("block_ids", core.serialization.list(core.serialization.string()).optional()),
    toolRules: core.serialization.property("tool_rules", core.serialization.list(LettaSchemasAgentFileAgentSchemaToolRulesItem_1.LettaSchemasAgentFileAgentSchemaToolRulesItem).optional()),
    tags: core.serialization.list(core.serialization.string()).optional(),
    system: core.serialization.string().optional(),
    agentType: core.serialization.property("agent_type", AgentType_1.AgentType.optional()),
    llmConfig: core.serialization.property("llm_config", LlmConfig_1.LlmConfig.optional()),
    embeddingConfig: core.serialization.property("embedding_config", EmbeddingConfig_1.EmbeddingConfig.optional()),
    initialMessageSequence: core.serialization.property("initial_message_sequence", core.serialization.list(MessageCreate_1.MessageCreate).optional()),
    includeBaseTools: core.serialization.property("include_base_tools", core.serialization.boolean().optional()),
    includeMultiAgentTools: core.serialization.property("include_multi_agent_tools", core.serialization.boolean().optional()),
    includeBaseToolRules: core.serialization.property("include_base_tool_rules", core.serialization.boolean().optional()),
    includeDefaultSource: core.serialization.property("include_default_source", core.serialization.boolean().optional()),
    description: core.serialization.string().optional(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    model: core.serialization.string().optional(),
    embedding: core.serialization.string().optional(),
    contextWindowLimit: core.serialization.property("context_window_limit", core.serialization.number().optional()),
    embeddingChunkSize: core.serialization.property("embedding_chunk_size", core.serialization.number().optional()),
    maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
    maxReasoningTokens: core.serialization.property("max_reasoning_tokens", core.serialization.number().optional()),
    enableReasoner: core.serialization.property("enable_reasoner", core.serialization.boolean().optional()),
    reasoning: core.serialization.boolean().optional(),
    fromTemplate: core.serialization.property("from_template", core.serialization.string().optional()),
    template: core.serialization.boolean().optional(),
    project: core.serialization.string().optional(),
    toolExecEnvironmentVariables: core.serialization.property("tool_exec_environment_variables", core.serialization.record(core.serialization.string(), core.serialization.string().optional()).optional()),
    secrets: core.serialization.record(core.serialization.string(), core.serialization.string().optional()).optional(),
    memoryVariables: core.serialization.property("memory_variables", core.serialization.record(core.serialization.string(), core.serialization.string().optional()).optional()),
    projectId: core.serialization.property("project_id", core.serialization.string().optional()),
    templateId: core.serialization.property("template_id", core.serialization.string().optional()),
    baseTemplateId: core.serialization.property("base_template_id", core.serialization.string().optional()),
    identityIds: core.serialization.property("identity_ids", core.serialization.list(core.serialization.string()).optional()),
    messageBufferAutoclear: core.serialization.property("message_buffer_autoclear", core.serialization.boolean().optional()),
    enableSleeptime: core.serialization.property("enable_sleeptime", core.serialization.boolean().optional()),
    responseFormat: core.serialization.property("response_format", LettaSchemasAgentFileAgentSchemaResponseFormat_1.LettaSchemasAgentFileAgentSchemaResponseFormat.optional()),
    timezone: core.serialization.string().optional(),
    maxFilesOpen: core.serialization.property("max_files_open", core.serialization.number().optional()),
    perFileViewWindowCharLimit: core.serialization.property("per_file_view_window_char_limit", core.serialization.number().optional()),
    hidden: core.serialization.boolean().optional(),
    parallelToolCalls: core.serialization.property("parallel_tool_calls", core.serialization.boolean().optional()),
    id: core.serialization.string(),
    inContextMessageIds: core.serialization.property("in_context_message_ids", core.serialization.list(core.serialization.string()).optional()),
    messages: core.serialization.list(LettaSchemasAgentFileMessageSchema_1.LettaSchemasAgentFileMessageSchema).optional(),
    filesAgents: core.serialization.property("files_agents", core.serialization.list(FileAgentSchema_1.FileAgentSchema).optional()),
    groupIds: core.serialization.property("group_ids", core.serialization.list(core.serialization.string()).optional()),
});
