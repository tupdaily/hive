/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Feedback {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Feedback {
    protected readonly _options: Feedback.Options;
    constructor(_options?: Feedback.Options);
    /**
     * Modify feedback for a given step.
     *
     * @param {string} stepId - The ID of the step in the format 'step-<uuid4>'
     * @param {Letta.steps.ModifyFeedbackRequest} request
     * @param {Feedback.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.steps.feedback.create("step-123e4567-e89b-42d3-8456-426614174000")
     */
    create(stepId: string, request?: Letta.steps.ModifyFeedbackRequest, requestOptions?: Feedback.RequestOptions): core.HttpResponsePromise<Letta.Step>;
    private __create;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
