/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import { Metrics } from "../resources/metrics/client/Client";
import { Trace } from "../resources/trace/client/Client";
import { Feedback } from "../resources/feedback/client/Client";
import { Messages } from "../resources/messages/client/Client";
export declare namespace Steps {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Steps {
    protected readonly _options: Steps.Options;
    protected _metrics: Metrics | undefined;
    protected _trace: Trace | undefined;
    protected _feedback: Feedback | undefined;
    protected _messages: Messages | undefined;
    constructor(_options?: Steps.Options);
    get metrics(): Metrics;
    get trace(): Trace;
    get feedback(): Feedback;
    get messages(): Messages;
    /**
     * List steps with optional pagination and date filters.
     *
     * @param {Letta.StepsListRequest} request
     * @param {Steps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.steps.list({
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at",
     *         startDate: "start_date",
     *         endDate: "end_date",
     *         model: "model",
     *         agentId: "agent_id",
     *         feedback: "positive",
     *         hasFeedback: true,
     *         projectId: "project_id"
     *     })
     */
    list(request?: Letta.StepsListRequest, requestOptions?: Steps.RequestOptions): core.HttpResponsePromise<Letta.Step[]>;
    private __list;
    /**
     * Get a step by ID.
     *
     * @param {string} stepId - The ID of the step in the format 'step-<uuid4>'
     * @param {Steps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.steps.retrieve("step-123e4567-e89b-42d3-8456-426614174000")
     */
    retrieve(stepId: string, requestOptions?: Steps.RequestOptions): core.HttpResponsePromise<Letta.Step>;
    private __retrieve;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
