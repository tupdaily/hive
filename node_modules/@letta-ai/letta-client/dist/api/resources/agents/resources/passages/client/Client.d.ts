/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Passages {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Passages {
    protected readonly _options: Passages.Options;
    constructor(_options?: Passages.Options);
    /**
     * Retrieve the memories in an agent's archival memory store (paginated query).
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.PassagesListRequest} request
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.passages.list("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         after: "after",
     *         before: "before",
     *         limit: 1,
     *         search: "search",
     *         ascending: true
     *     })
     */
    list(agentId: string, request?: Letta.agents.PassagesListRequest, requestOptions?: Passages.RequestOptions): core.HttpResponsePromise<Letta.Passage[]>;
    private __list;
    /**
     * Insert a memory into an agent's archival memory store.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.CreateArchivalMemory} request
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.passages.create("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         text: "text"
     *     })
     */
    create(agentId: string, request: Letta.agents.CreateArchivalMemory, requestOptions?: Passages.RequestOptions): core.HttpResponsePromise<Letta.Passage[]>;
    private __create;
    /**
     * Search archival memory using semantic (embedding-based) search with optional temporal filtering.
     *
     * This endpoint allows manual triggering of archival memory searches, enabling users to query
     * an agent's archival memory store directly via the API. The search uses the same functionality
     * as the agent's archival_memory_search tool but is accessible for external API usage.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.PassagesSearchRequest} request
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.passages.search("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         query: "query",
     *         tagMatchMode: "any",
     *         topK: 1,
     *         startDatetime: "2024-01-15T09:30:00Z",
     *         endDatetime: "2024-01-15T09:30:00Z"
     *     })
     */
    search(agentId: string, request: Letta.agents.PassagesSearchRequest, requestOptions?: Passages.RequestOptions): core.HttpResponsePromise<Letta.ArchivalMemorySearchResponse>;
    private __search;
    /**
     * Delete a memory from an agent's archival memory store.
     *
     * @param {string} agentId
     * @param {string} memoryId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.passages.delete("agent_id", "agent-123e4567-e89b-42d3-8456-426614174000")
     */
    delete(agentId: string, memoryId: string, requestOptions?: Passages.RequestOptions): core.HttpResponsePromise<unknown>;
    private __delete;
    /**
     * @param {string} agentId
     * @param {string} memoryId
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.passages.modify("agent_id", "memory_id")
     */
    modify(agentId: string, memoryId: string, requestOptions?: Passages.RequestOptions): core.HttpResponsePromise<void>;
    private __modify;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
