/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Messages {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Messages {
    protected readonly _options: Messages.Options;
    constructor(_options?: Messages.Options);
    /**
     * Retrieve message history for an agent.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.MessagesListRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.list("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at",
     *         groupId: "group_id",
     *         useAssistantMessage: true,
     *         assistantMessageToolName: "assistant_message_tool_name",
     *         assistantMessageToolKwarg: "assistant_message_tool_kwarg",
     *         includeErr: true
     *     })
     */
    list(agentId: string, request?: Letta.agents.MessagesListRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Letta.LettaMessageUnion[]>;
    private __list;
    /**
     * Process a user message and return the agent's response.
     * This endpoint accepts a message from a user and processes it through the agent.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.LettaRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.create("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         messages: [{
     *                 role: "user",
     *                 content: [{
     *                         type: "text",
     *                         text: "The sky above the port was the color of television, tuned to a dead channel."
     *                     }]
     *             }]
     *     })
     */
    create(agentId: string, request: Letta.LettaRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Letta.LettaResponse>;
    private __create;
    /**
     * Update the details of a message associated with an agent.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {string} messageId - The ID of the message in the format 'message-<uuid4>'
     * @param {Letta.agents.MessagesModifyRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.modify("agent-123e4567-e89b-42d3-8456-426614174000", "message-123e4567-e89b-42d3-8456-426614174000", {
     *         content: "content"
     *     })
     */
    modify(agentId: string, messageId: string, request: Letta.agents.MessagesModifyRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Letta.agents.MessagesModifyResponse>;
    private __modify;
    /**
     * Process a user message and return the agent's response.
     * This endpoint accepts a message from a user and processes it through the agent.
     * It will stream the steps of the response always, and stream the tokens if 'stream_tokens' is set to True.
     */
    createStream(agentId: string, request: Letta.LettaStreamingRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<core.Stream<Letta.agents.LettaStreamingResponse>>;
    private __createStream;
    /**
     * Cancel runs associated with an agent. If run_ids are passed in, cancel those in particular.
     *
     * Note to cancel active runs associated with an agent, redis is required.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.CancelAgentRunRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.cancel("agent-123e4567-e89b-42d3-8456-426614174000")
     */
    cancel(agentId: string, request?: Letta.agents.CancelAgentRunRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Record<string, unknown>>;
    private __cancel;
    /**
     * Search messages across the entire organization with optional project and template filtering. Returns messages with FTS/vector ranks and total RRF score.
     *
     * This is a cloud-only feature.
     *
     * @param {Letta.agents.MessageSearchRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.search()
     */
    search(request?: Letta.agents.MessageSearchRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Letta.MessageSearchResult[]>;
    private __search;
    /**
     * Asynchronously process a user message and return a run object.
     * The actual processing happens in the background, and the status can be checked using the run ID.
     *
     * This is "asynchronous" in the sense that it's a background run and explicitly must be fetched by the run ID.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.LettaAsyncRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.createAsync("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         messages: [{
     *                 role: "user",
     *                 content: [{
     *                         type: "text",
     *                         text: "text"
     *                     }]
     *             }]
     *     })
     */
    createAsync(agentId: string, request: Letta.agents.LettaAsyncRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Letta.Run>;
    private __createAsync;
    /**
     * Resets the messages for an agent
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.MessagesResetRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.reset("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         addDefaultInitialMessages: true
     *     })
     */
    reset(agentId: string, request?: Letta.agents.MessagesResetRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Letta.AgentState>;
    private __reset;
    /**
     * Inspect the raw LLM request payload without sending it.
     *
     * This endpoint processes the message through the agent loop up until
     * the LLM request, then returns the raw request payload that would
     * be sent to the LLM provider. Useful for debugging and inspection.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.MessagesPreviewRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.preview("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         messages: [{
     *                 role: "user",
     *                 content: [{
     *                         type: "text",
     *                         text: "text"
     *                     }]
     *             }]
     *     })
     */
    preview(agentId: string, request: Letta.agents.MessagesPreviewRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Record<string, unknown>>;
    private __preview;
    /**
     * Summarize an agent's conversation history to a target message length.
     *
     * This endpoint summarizes the current message history for a given agent,
     * truncating and compressing it down to the specified `max_message_length`.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.MessagesSummarizeRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.summarize("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         maxMessageLength: 1
     *     })
     */
    summarize(agentId: string, request: Letta.agents.MessagesSummarizeRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<void>;
    private __summarize;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
