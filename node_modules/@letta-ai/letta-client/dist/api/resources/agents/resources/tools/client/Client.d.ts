/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Tools {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Tools {
    protected readonly _options: Tools.Options;
    constructor(_options?: Tools.Options);
    /**
     * Get tools from an existing agent
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.agents.ToolsListRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.tools.list("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at"
     *     })
     */
    list(agentId: string, request?: Letta.agents.ToolsListRequest, requestOptions?: Tools.RequestOptions): core.HttpResponsePromise<Letta.Tool[]>;
    private __list;
    /**
     * Attach a tool to an agent.
     *
     * @param {string} agentId - The ID of the tool in the format 'tool-<uuid4>'
     * @param {string} toolId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.tools.attach("tool-123e4567-e89b-42d3-8456-426614174000", "agent-123e4567-e89b-42d3-8456-426614174000")
     */
    attach(agentId: string, toolId: string, requestOptions?: Tools.RequestOptions): core.HttpResponsePromise<Letta.AgentState>;
    private __attach;
    /**
     * Detach a tool from an agent.
     *
     * @param {string} agentId - The ID of the tool in the format 'tool-<uuid4>'
     * @param {string} toolId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.tools.detach("tool-123e4567-e89b-42d3-8456-426614174000", "agent-123e4567-e89b-42d3-8456-426614174000")
     */
    detach(agentId: string, toolId: string, requestOptions?: Tools.RequestOptions): core.HttpResponsePromise<Letta.AgentState>;
    private __detach;
    /**
     * Attach a tool to an agent.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {string} toolName
     * @param {Letta.agents.ToolsModifyApprovalRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.tools.modifyApproval("agent-123e4567-e89b-42d3-8456-426614174000", "tool_name", {
     *         requiresApproval: true
     *     })
     */
    modifyApproval(agentId: string, toolName: string, request: Letta.agents.ToolsModifyApprovalRequest, requestOptions?: Tools.RequestOptions): core.HttpResponsePromise<Letta.AgentState>;
    private __modifyApproval;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
