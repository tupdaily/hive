/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Letta from "../../../../index";
/**
 * @example
 *     {}
 */
export interface UpdateAgent {
    /** The name of the agent. */
    name?: string;
    /** The ids of the tools used by the agent. */
    toolIds?: string[];
    /** The ids of the sources used by the agent. */
    sourceIds?: string[];
    /** The ids of the blocks used by the agent. */
    blockIds?: string[];
    /** The tags associated with the agent. */
    tags?: string[];
    /** The system prompt used by the agent. */
    system?: string;
    /** The tool rules governing the agent. */
    toolRules?: Letta.UpdateAgentToolRulesItem[];
    /** The LLM configuration used by the agent. */
    llmConfig?: Letta.LlmConfig;
    /** The embedding configuration used by the agent. */
    embeddingConfig?: Letta.EmbeddingConfig;
    /** The ids of the messages in the agent's in-context memory. */
    messageIds?: string[];
    /** The description of the agent. */
    description?: string;
    /** The metadata of the agent. */
    metadata?: Record<string, unknown>;
    /** Deprecated: use `secrets` field instead */
    toolExecEnvironmentVariables?: Record<string, string | undefined>;
    /** The environment variables for tool execution specific to this agent. */
    secrets?: Record<string, string | undefined>;
    /** The id of the project the agent belongs to. */
    projectId?: string;
    /** The id of the template the agent belongs to. */
    templateId?: string;
    /** The base template id of the agent. */
    baseTemplateId?: string;
    /** The ids of the identities associated with this agent. */
    identityIds?: string[];
    /** If set to True, the agent will not remember previous messages (though the agent will still retain state via core memory blocks and archival/recall memory). Not recommended unless you have an advanced use case. */
    messageBufferAutoclear?: boolean;
    /** The LLM configuration handle used by the agent, specified in the format provider/model-name, as an alternative to specifying llm_config. */
    model?: string;
    /** The embedding configuration handle used by the agent, specified in the format provider/model-name. */
    embedding?: string;
    /** Whether to enable reasoning for this agent. */
    reasoning?: boolean;
    /** If set to True, memory management will move to a background agent thread. */
    enableSleeptime?: boolean;
    /** The response format for the agent. */
    responseFormat?: Letta.UpdateAgentResponseFormat;
    /** The timestamp when the agent last completed a run. */
    lastRunCompletion?: Date;
    /** The duration in milliseconds of the agent's last run. */
    lastRunDurationMs?: number;
    /** The timezone of the agent (IANA format). */
    timezone?: string;
    /** Maximum number of files that can be open at once for this agent. Setting this too high may exceed the context window, which will break the agent. */
    maxFilesOpen?: number;
    /** The per-file view window character limit for this agent. Setting this too high may exceed the context window, which will break the agent. */
    perFileViewWindowCharLimit?: number;
    /** If set to True, the agent will be hidden. */
    hidden?: boolean;
    /** If set to True, enables parallel tool calling. Defaults to False. */
    parallelToolCalls?: boolean;
}
