/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import * as fs from "fs";
import { Blob } from "buffer";
import { Context } from "../resources/context/client/Client";
import { Tools } from "../resources/tools/client/Client";
import { Sources } from "../resources/sources/client/Client";
import { Folders } from "../resources/folders/client/Client";
import { Files } from "../resources/files/client/Client";
import { CoreMemory } from "../resources/coreMemory/client/Client";
import { Blocks } from "../resources/blocks/client/Client";
import { Passages } from "../resources/passages/client/Client";
import { Messages } from "../resources/messages/client/Client";
import { Groups } from "../resources/groups/client/Client";
import { MemoryVariables } from "../resources/memoryVariables/client/Client";
export declare namespace Agents {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Agents {
    protected readonly _options: Agents.Options;
    protected _context: Context | undefined;
    protected _tools: Tools | undefined;
    protected _sources: Sources | undefined;
    protected _folders: Folders | undefined;
    protected _files: Files | undefined;
    protected _coreMemory: CoreMemory | undefined;
    protected _blocks: Blocks | undefined;
    protected _passages: Passages | undefined;
    protected _messages: Messages | undefined;
    protected _groups: Groups | undefined;
    protected _memoryVariables: MemoryVariables | undefined;
    constructor(_options?: Agents.Options);
    get context(): Context;
    get tools(): Tools;
    get sources(): Sources;
    get folders(): Folders;
    get files(): Files;
    get coreMemory(): CoreMemory;
    get blocks(): Blocks;
    get passages(): Passages;
    get messages(): Messages;
    get groups(): Groups;
    get memoryVariables(): MemoryVariables;
    /**
     * Get a list of all agents.
     *
     * @param {Letta.AgentsListRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.list({
     *         name: "name",
     *         matchAllTags: true,
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         queryText: "query_text",
     *         projectId: "project_id",
     *         templateId: "template_id",
     *         baseTemplateId: "base_template_id",
     *         identityId: "identity_id",
     *         order: "asc",
     *         orderBy: "created_at",
     *         ascending: true,
     *         sortBy: "sort_by"
     *     })
     */
    list(request?: Letta.AgentsListRequest, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<Letta.AgentState[]>;
    private __list;
    /**
     * Create an agent.
     *
     * @param {Letta.CreateAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.create()
     */
    create(request?: Letta.CreateAgentRequest, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<Letta.AgentState>;
    private __create;
    /**
     * Get the total number of agents.
     *
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.count()
     */
    count(requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<number>;
    private __count;
    /**
     * Export the serialized JSON representation of an agent, formatted with indentation.
     *
     * Supports two export formats:
     * - Legacy format (use_legacy_format=true): Single agent with inline tools/blocks
     * - New format (default): Multi-entity format with separate agents, tools, blocks, files, etc.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.AgentsExportFileRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.exportFile("agent-123e4567-e89b-42d3-8456-426614174000", {
     *         maxSteps: 1,
     *         useLegacyFormat: true
     *     })
     */
    exportFile(agentId: string, request?: Letta.AgentsExportFileRequest, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<string>;
    private __exportFile;
    /**
     * Import a serialized agent file and recreate the agent(s) in the system.
     * Returns the IDs of all imported agents.
     *
     * @param {File | fs.ReadStream | Blob} file
     * @param {Letta.BodyImportAgent} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.importFile(fs.createReadStream("/path/to/your/file"), {
     *         overrideEmbeddingModel: "x-override-embedding-model"
     *     })
     */
    importFile(file: File | fs.ReadStream | Blob, request: Letta.BodyImportAgent, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<Letta.ImportedAgentsResponse>;
    private __importFile;
    /**
     * Get the state of the agent.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.AgentsRetrieveRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.retrieve("agent-123e4567-e89b-42d3-8456-426614174000")
     */
    retrieve(agentId: string, request?: Letta.AgentsRetrieveRequest, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<Letta.AgentState>;
    private __retrieve;
    /**
     * Delete an agent.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.delete("agent-123e4567-e89b-42d3-8456-426614174000")
     */
    delete(agentId: string, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<unknown>;
    private __delete;
    /**
     * Update an existing agent.
     *
     * @param {string} agentId - The ID of the agent in the format 'agent-<uuid4>'
     * @param {Letta.UpdateAgent} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.modify("agent-123e4567-e89b-42d3-8456-426614174000")
     */
    modify(agentId: string, request?: Letta.UpdateAgent, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<Letta.AgentState>;
    private __modify;
    /**
     * <Note>This endpoint is only available on Letta Cloud.</Note>
     *
     * Search deployed agents.
     *
     * @param {Letta.AgentsSearchRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.search()
     */
    search(request?: Letta.AgentsSearchRequest, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<Letta.AgentsSearchResponse>;
    private __search;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
