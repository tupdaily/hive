/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import { Properties } from "../resources/properties/client/Client";
import { Agents } from "../resources/agents/client/Client";
import { Blocks } from "../resources/blocks/client/Client";
export declare namespace Identities {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Identities {
    protected readonly _options: Identities.Options;
    protected _properties: Properties | undefined;
    protected _agents: Agents | undefined;
    protected _blocks: Blocks | undefined;
    constructor(_options?: Identities.Options);
    get properties(): Properties;
    get agents(): Agents;
    get blocks(): Blocks;
    /**
     * Get a list of all identities in the database
     *
     * @param {Letta.IdentitiesListRequest} request
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.list({
     *         name: "name",
     *         projectId: "project_id",
     *         identifierKey: "identifier_key",
     *         identityType: "org",
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at"
     *     })
     */
    list(request?: Letta.IdentitiesListRequest, requestOptions?: Identities.RequestOptions): core.HttpResponsePromise<Letta.Identity[]>;
    private __list;
    /**
     * @param {Letta.IdentityCreate} request
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.create({
     *         identifierKey: "identifier_key",
     *         name: "name",
     *         identityType: "org"
     *     })
     */
    create(request: Letta.IdentityCreate, requestOptions?: Identities.RequestOptions): core.HttpResponsePromise<Letta.Identity>;
    private __create;
    /**
     * @param {Letta.IdentityUpsert} request
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.upsert({
     *         identifierKey: "identifier_key",
     *         name: "name",
     *         identityType: "org"
     *     })
     */
    upsert(request: Letta.IdentityUpsert, requestOptions?: Identities.RequestOptions): core.HttpResponsePromise<Letta.Identity>;
    private __upsert;
    /**
     * Get count of all identities for a user
     *
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.count()
     */
    count(requestOptions?: Identities.RequestOptions): core.HttpResponsePromise<number>;
    private __count;
    /**
     * @param {string} identityId - The ID of the identity in the format 'identity-<uuid4>'
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.retrieve("identity-123e4567-e89b-42d3-8456-426614174000")
     */
    retrieve(identityId: string, requestOptions?: Identities.RequestOptions): core.HttpResponsePromise<Letta.Identity>;
    private __retrieve;
    /**
     * Delete an identity by its identifier key
     *
     * @param {string} identityId - The ID of the identity in the format 'identity-<uuid4>'
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.delete("identity-123e4567-e89b-42d3-8456-426614174000")
     */
    delete(identityId: string, requestOptions?: Identities.RequestOptions): core.HttpResponsePromise<unknown>;
    private __delete;
    /**
     * @param {string} identityId - The ID of the identity in the format 'identity-<uuid4>'
     * @param {Letta.IdentityUpdate} request
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.modify("identity-123e4567-e89b-42d3-8456-426614174000")
     */
    modify(identityId: string, request?: Letta.IdentityUpdate, requestOptions?: Identities.RequestOptions): core.HttpResponsePromise<Letta.Identity>;
    private __modify;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
