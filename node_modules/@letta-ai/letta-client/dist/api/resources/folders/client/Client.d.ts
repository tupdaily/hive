/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import { Files } from "../resources/files/client/Client";
import { Agents } from "../resources/agents/client/Client";
import { Passages } from "../resources/passages/client/Client";
export declare namespace Folders {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Folders {
    protected readonly _options: Folders.Options;
    protected _files: Files | undefined;
    protected _agents: Agents | undefined;
    protected _passages: Passages | undefined;
    constructor(_options?: Folders.Options);
    get files(): Files;
    get agents(): Agents;
    get passages(): Passages;
    /**
     * Count all data folders created by a user.
     *
     * @param {Folders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.count()
     */
    count(requestOptions?: Folders.RequestOptions): core.HttpResponsePromise<number>;
    private __count;
    /**
     * Get a folder by ID
     *
     * @param {string} folderId
     * @param {Folders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.retrieve("folder_id")
     */
    retrieve(folderId: string, requestOptions?: Folders.RequestOptions): core.HttpResponsePromise<Letta.Folder>;
    private __retrieve;
    /**
     * Delete a data folder.
     *
     * @param {string} folderId
     * @param {Folders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.delete("folder_id")
     */
    delete(folderId: string, requestOptions?: Folders.RequestOptions): core.HttpResponsePromise<unknown>;
    private __delete;
    /**
     * Update the name or documentation of an existing data folder.
     *
     * @param {string} folderId
     * @param {Letta.SourceUpdate} request
     * @param {Folders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.modify("folder_id", {})
     */
    modify(folderId: string, request: Letta.SourceUpdate, requestOptions?: Folders.RequestOptions): core.HttpResponsePromise<Letta.Folder>;
    private __modify;
    /**
     * **Deprecated**: Please use the list endpoint `GET /v1/folders?name=` instead.
     *
     *
     * Get a folder by name.
     *
     * @param {string} folderName
     * @param {Folders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.retrieveByName("folder_name")
     */
    retrieveByName(folderName: string, requestOptions?: Folders.RequestOptions): core.HttpResponsePromise<string>;
    private __retrieveByName;
    /**
     * Get aggregated metadata for all folders in an organization.
     *
     * Returns structured metadata including:
     * - Total number of folders
     * - Total number of files across all folders
     * - Total size of all files
     * - Per-source breakdown with file details (file_name, file_size per file) if include_detailed_per_source_metadata is True
     *
     * @param {Letta.RetrieveMetadataRequest} request
     * @param {Folders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.retrieveMetadata({
     *         includeDetailedPerSourceMetadata: true
     *     })
     */
    retrieveMetadata(request?: Letta.RetrieveMetadataRequest, requestOptions?: Folders.RequestOptions): core.HttpResponsePromise<Letta.OrganizationSourcesStats>;
    private __retrieveMetadata;
    /**
     * List all data folders created by a user.
     *
     * @param {Letta.FoldersListRequest} request
     * @param {Folders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.list({
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at",
     *         name: "name"
     *     })
     */
    list(request?: Letta.FoldersListRequest, requestOptions?: Folders.RequestOptions): core.HttpResponsePromise<Letta.Folder[]>;
    private __list;
    /**
     * Create a new data folder.
     *
     * @param {Letta.SourceCreate} request
     * @param {Folders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.create({
     *         name: "name"
     *     })
     */
    create(request: Letta.SourceCreate, requestOptions?: Folders.RequestOptions): core.HttpResponsePromise<Letta.Folder>;
    private __create;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
