/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
import * as fs from "fs";
import { Blob } from "buffer";
export declare namespace Files {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Files {
    protected readonly _options: Files.Options;
    constructor(_options?: Files.Options);
    /**
     * Upload a file to a data folder.
     *
     * @param {File | fs.ReadStream | Blob} file
     * @param {string} folderId
     * @param {Letta.folders.BodyUploadFileToFolder} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.files.upload(fs.createReadStream("/path/to/your/file"), "folder_id", {
     *         duplicateHandling: "skip",
     *         name: "name"
     *     })
     */
    upload(file: File | fs.ReadStream | Blob, folderId: string, request: Letta.folders.BodyUploadFileToFolder, requestOptions?: Files.RequestOptions): core.HttpResponsePromise<Letta.FileMetadata>;
    private __upload;
    /**
     * List paginated files associated with a data folder.
     *
     * @param {string} folderId
     * @param {Letta.folders.FilesListRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.files.list("folder_id", {
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at",
     *         includeContent: true
     *     })
     */
    list(folderId: string, request?: Letta.folders.FilesListRequest, requestOptions?: Files.RequestOptions): core.HttpResponsePromise<Letta.FileMetadata[]>;
    private __list;
    /**
     * Delete a file from a folder.
     *
     * @param {string} folderId
     * @param {string} fileId
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.folders.files.delete("folder_id", "file_id")
     */
    delete(folderId: string, fileId: string, requestOptions?: Files.RequestOptions): core.HttpResponsePromise<void>;
    private __delete;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
