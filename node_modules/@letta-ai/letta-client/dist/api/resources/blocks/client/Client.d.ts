/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import { Agents } from "../resources/agents/client/Client";
export declare namespace Blocks {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Blocks {
    protected readonly _options: Blocks.Options;
    protected _agents: Agents | undefined;
    constructor(_options?: Blocks.Options);
    get agents(): Agents;
    /**
     * @param {Letta.BlocksListRequest} request
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.blocks.list({
     *         label: "label",
     *         templatesOnly: true,
     *         name: "name",
     *         identityId: "identity_id",
     *         projectId: "project_id",
     *         limit: 1,
     *         before: "before",
     *         after: "after",
     *         order: "asc",
     *         orderBy: "created_at",
     *         labelSearch: "label_search",
     *         descriptionSearch: "description_search",
     *         valueSearch: "value_search",
     *         connectedToAgentsCountGt: 1,
     *         connectedToAgentsCountLt: 1
     *     })
     */
    list(request?: Letta.BlocksListRequest, requestOptions?: Blocks.RequestOptions): core.HttpResponsePromise<Letta.Block[]>;
    private __list;
    /**
     * @param {Letta.CreateBlock} request
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.blocks.create({
     *         value: "value",
     *         label: "label"
     *     })
     */
    create(request: Letta.CreateBlock, requestOptions?: Blocks.RequestOptions): core.HttpResponsePromise<Letta.Block>;
    private __create;
    /**
     * Count all blocks created by a user.
     *
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.blocks.count()
     */
    count(requestOptions?: Blocks.RequestOptions): core.HttpResponsePromise<number>;
    private __count;
    /**
     * @param {string} blockId - The ID of the block in the format 'block-<uuid4>'
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.blocks.retrieve("block-123e4567-e89b-42d3-8456-426614174000")
     */
    retrieve(blockId: string, requestOptions?: Blocks.RequestOptions): core.HttpResponsePromise<Letta.Block>;
    private __retrieve;
    /**
     * @param {string} blockId - The ID of the block in the format 'block-<uuid4>'
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.blocks.delete("block-123e4567-e89b-42d3-8456-426614174000")
     */
    delete(blockId: string, requestOptions?: Blocks.RequestOptions): core.HttpResponsePromise<unknown>;
    private __delete;
    /**
     * @param {string} blockId - The ID of the block in the format 'block-<uuid4>'
     * @param {Letta.BlockUpdate} request
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.blocks.modify("block-123e4567-e89b-42d3-8456-426614174000", {})
     */
    modify(blockId: string, request: Letta.BlockUpdate, requestOptions?: Blocks.RequestOptions): core.HttpResponsePromise<Letta.Block>;
    private __modify;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
