/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Messages {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Messages {
    protected readonly _options: Messages.Options;
    constructor(_options?: Messages.Options);
    /**
     * Retrieve message history for an agent.
     *
     * @param {string} groupId - The ID of the group in the format 'group-<uuid4>'
     * @param {Letta.groups.MessagesListRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.messages.list("group-123e4567-e89b-42d3-8456-426614174000", {
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at",
     *         useAssistantMessage: true,
     *         assistantMessageToolName: "assistant_message_tool_name",
     *         assistantMessageToolKwarg: "assistant_message_tool_kwarg"
     *     })
     */
    list(groupId: string, request?: Letta.groups.MessagesListRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Letta.LettaMessageUnion[]>;
    private __list;
    /**
     * Process a user message and return the group's response.
     * This endpoint accepts a message from a user and processes it through through agents in the group based on the specified pattern
     *
     * @param {string} groupId - The ID of the group in the format 'group-<uuid4>'
     * @param {Letta.LettaRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.messages.create("group-123e4567-e89b-42d3-8456-426614174000", {
     *         messages: [{
     *                 role: "user",
     *                 content: [{
     *                         type: "text",
     *                         text: "The sky above the port was the color of television, tuned to a dead channel."
     *                     }]
     *             }]
     *     })
     */
    create(groupId: string, request: Letta.LettaRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Letta.LettaResponse>;
    private __create;
    /**
     * Process a user message and return the group's responses.
     * This endpoint accepts a message from a user and processes it through agents in the group based on the specified pattern.
     * It will stream the steps of the response always, and stream the tokens if 'stream_tokens' is set to True.
     */
    createStream(groupId: string, request: Letta.LettaStreamingRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<core.Stream<Letta.groups.LettaStreamingResponse>>;
    private __createStream;
    /**
     * Update the details of a message associated with an agent.
     *
     * @param {string} groupId - The ID of the group in the format 'group-<uuid4>'
     * @param {string} messageId - The ID of the message in the format 'message-<uuid4>'
     * @param {Letta.groups.MessagesModifyRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.messages.modify("group-123e4567-e89b-42d3-8456-426614174000", "message-123e4567-e89b-42d3-8456-426614174000", {
     *         content: "content"
     *     })
     */
    modify(groupId: string, messageId: string, request: Letta.groups.MessagesModifyRequest, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<Letta.groups.MessagesModifyResponse>;
    private __modify;
    /**
     * Delete the group messages for all agents that are part of the multi-agent group.
     *
     * @param {string} groupId - The ID of the group in the format 'group-<uuid4>'
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.groups.messages.reset("group-123e4567-e89b-42d3-8456-426614174000")
     */
    reset(groupId: string, requestOptions?: Messages.RequestOptions): core.HttpResponsePromise<unknown>;
    private __reset;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
