/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace ClientSideAccessTokens {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class ClientSideAccessTokens {
    protected readonly _options: ClientSideAccessTokens.Options;
    constructor(_options?: ClientSideAccessTokens.Options);
    /**
     * List all client side access tokens for the current account. This is only available for cloud users.
     *
     * @param {Letta.ClientSideAccessTokensListClientSideAccessTokensRequest} request
     * @param {ClientSideAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     *
     * @example
     *     await client.clientSideAccessTokens.clientSideAccessTokensListClientSideAccessTokens({
     *         agentId: "agentId",
     *         offset: 1.1,
     *         limit: 1.1
     *     })
     */
    clientSideAccessTokensListClientSideAccessTokens(request?: Letta.ClientSideAccessTokensListClientSideAccessTokensRequest, requestOptions?: ClientSideAccessTokens.RequestOptions): core.HttpResponsePromise<Letta.ClientSideAccessTokensListClientSideAccessTokensResponse>;
    private __clientSideAccessTokensListClientSideAccessTokens;
    /**
     * Create a new client side access token with the specified configuration.
     *
     * @param {Letta.ClientSideAccessTokensCreateRequest} request
     * @param {ClientSideAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     *
     * @example
     *     await client.clientSideAccessTokens.create({
     *         policy: [{
     *                 type: "agent",
     *                 id: "id",
     *                 access: ["read_messages"]
     *             }],
     *         hostname: "hostname"
     *     })
     */
    create(request: Letta.ClientSideAccessTokensCreateRequest, requestOptions?: ClientSideAccessTokens.RequestOptions): core.HttpResponsePromise<Letta.ClientSideAccessTokensCreateResponse>;
    private __create;
    /**
     * Delete a client side access token.
     *
     * @param {string} token - The access token to delete
     * @param {unknown} request
     * @param {ClientSideAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     *
     * @example
     *     await client.clientSideAccessTokens.delete("token", {
     *         "key": "value"
     *     })
     */
    delete(token: string, request?: unknown, requestOptions?: ClientSideAccessTokens.RequestOptions): core.HttpResponsePromise<unknown>;
    private __delete;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
