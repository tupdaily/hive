/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import { Messages } from "../resources/messages/client/Client";
import { Usage } from "../resources/usage/client/Client";
import { Steps } from "../resources/steps/client/Client";
export declare namespace Runs {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Runs {
    protected readonly _options: Runs.Options;
    protected _messages: Messages | undefined;
    protected _usage: Usage | undefined;
    protected _steps: Steps | undefined;
    constructor(_options?: Runs.Options);
    get messages(): Messages;
    get usage(): Usage;
    get steps(): Steps;
    /**
     * List all runs.
     *
     * @param {Letta.RunsListRequest} request
     * @param {Runs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.runs.list({
     *         agentId: "agent_id",
     *         background: true,
     *         stopReason: "end_turn",
     *         before: "before",
     *         after: "after",
     *         limit: 1,
     *         order: "asc",
     *         orderBy: "created_at",
     *         active: true,
     *         ascending: true
     *     })
     */
    list(request?: Letta.RunsListRequest, requestOptions?: Runs.RequestOptions): core.HttpResponsePromise<Letta.Run[]>;
    private __list;
    /**
     * List all active runs.
     *
     * @param {Letta.RunsListActiveRequest} request
     * @param {Runs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.runs.listActive({
     *         agentId: "agent_id",
     *         background: true
     *     })
     */
    listActive(request?: Letta.RunsListActiveRequest, requestOptions?: Runs.RequestOptions): core.HttpResponsePromise<Letta.Run[]>;
    private __listActive;
    /**
     * Get the status of a run.
     *
     * @param {string} runId
     * @param {Runs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.runs.retrieve("run_id")
     */
    retrieve(runId: string, requestOptions?: Runs.RequestOptions): core.HttpResponsePromise<Letta.Run>;
    private __retrieve;
    /**
     * Delete a run by its run_id.
     *
     * @param {string} runId
     * @param {Runs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.runs.delete("run_id")
     */
    delete(runId: string, requestOptions?: Runs.RequestOptions): core.HttpResponsePromise<Letta.Run>;
    private __delete;
    /**
     * Get run metrics by run ID.
     *
     * @param {string} runId
     * @param {Runs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.runs.retrieveMetricsForRun("run_id")
     */
    retrieveMetricsForRun(runId: string, requestOptions?: Runs.RequestOptions): core.HttpResponsePromise<Letta.RunMetrics>;
    private __retrieveMetricsForRun;
    stream(runId: string, request?: Letta.RetrieveStreamRequest, requestOptions?: Runs.RequestOptions): core.HttpResponsePromise<core.Stream<Letta.LettaStreamingResponse>>;
    private __stream;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
