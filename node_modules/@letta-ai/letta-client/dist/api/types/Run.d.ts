/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Letta from "../index";
/**
 * Representation of a run - a conversation or processing session for an agent.
 * Runs track when agents process messages and maintain the relationship between agents, steps, and messages.
 *
 * Parameters:
 *     id (str): The unique identifier of the run (prefixed with 'run-').
 *     status (JobStatus): The current status of the run.
 *     created_at (datetime): The timestamp when the run was created.
 *     completed_at (datetime): The timestamp when the run was completed.
 *     agent_id (str): The unique identifier of the agent associated with the run.
 *     stop_reason (StopReasonType): The reason why the run was stopped.
 *     background (bool): Whether the run was created in background mode.
 *     metadata (dict): Additional metadata for the run.
 *     request_config (LettaRequestConfig): The request configuration for the run.
 */
export interface Run {
    /** The human-friendly ID of the Run */
    id?: string;
    /** The current status of the run. */
    status?: Letta.RunStatus;
    /** The timestamp when the run was created. */
    createdAt?: Date;
    /** The timestamp when the run was completed. */
    completedAt?: Date;
    /** The unique identifier of the agent associated with the run. */
    agentId: string;
    /** Whether the run was created in background mode. */
    background?: boolean;
    /** Additional metadata for the run. */
    metadata?: Record<string, unknown>;
    /** The request configuration for the run. */
    requestConfig?: Letta.LettaRequestConfig;
    /** The reason why the run was stopped. */
    stopReason?: Letta.StopReasonType;
    /** If set, POST to this URL when the run completes. */
    callbackUrl?: string;
    /** Timestamp when the callback was last attempted. */
    callbackSentAt?: Date;
    /** HTTP status code returned by the callback endpoint. */
    callbackStatusCode?: number;
    /** Optional error message from attempting to POST the callback endpoint. */
    callbackError?: string;
    /** Time to first token for a run in nanoseconds */
    ttftNs?: number;
    /** Total run duration in nanoseconds */
    totalDurationNs?: number;
}
