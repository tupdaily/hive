/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import { Archives } from "./api/resources/archives/client/Client";
import { Tools } from "./api/resources/tools/client/Client";
import { Sources } from "./api/resources/sources/client/Client";
import { Folders } from "./api/resources/folders/client/Client";
import { Agents } from "./api/resources/agents/client/Client";
import { Chat } from "./api/resources/chat/client/Client";
import { Groups } from "./api/resources/groups/client/Client";
import { Identities } from "./api/resources/identities/client/Client";
import { Models } from "./api/resources/models/client/Client";
import { Blocks } from "./api/resources/blocks/client/Client";
import { Jobs } from "./api/resources/jobs/client/Client";
import { Health } from "./api/resources/health/client/Client";
import { Providers } from "./api/resources/providers/client/Client";
import { Runs } from "./api/resources/runs/client/Client";
import { Steps } from "./api/resources/steps/client/Client";
import { Tags } from "./api/resources/tags/client/Client";
import { Telemetry } from "./api/resources/telemetry/client/Client";
import { Batches } from "./api/resources/batches/client/Client";
import { Voice } from "./api/resources/voice/client/Client";
import { Templates } from "./api/resources/templates/client/Client";
import { ClientSideAccessTokens } from "./api/resources/clientSideAccessTokens/client/Client";
import { Projects } from "./api/resources/projects/client/Client";
export declare namespace LettaClient {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class LettaClient {
    protected readonly _options: LettaClient.Options;
    protected _archives: Archives | undefined;
    protected _tools: Tools | undefined;
    protected _sources: Sources | undefined;
    protected _folders: Folders | undefined;
    protected _agents: Agents | undefined;
    protected _chat: Chat | undefined;
    protected _groups: Groups | undefined;
    protected _identities: Identities | undefined;
    protected _models: Models | undefined;
    protected _blocks: Blocks | undefined;
    protected _jobs: Jobs | undefined;
    protected _health: Health | undefined;
    protected _providers: Providers | undefined;
    protected _runs: Runs | undefined;
    protected _steps: Steps | undefined;
    protected _tags: Tags | undefined;
    protected _telemetry: Telemetry | undefined;
    protected _batches: Batches | undefined;
    protected _voice: Voice | undefined;
    protected _templates: Templates | undefined;
    protected _clientSideAccessTokens: ClientSideAccessTokens | undefined;
    protected _projects: Projects | undefined;
    constructor(_options?: LettaClient.Options);
    get archives(): Archives;
    get tools(): Tools;
    get sources(): Sources;
    get folders(): Folders;
    get agents(): Agents;
    get chat(): Chat;
    get groups(): Groups;
    get identities(): Identities;
    get models(): Models;
    get blocks(): Blocks;
    get jobs(): Jobs;
    get health(): Health;
    get providers(): Providers;
    get runs(): Runs;
    get steps(): Steps;
    get tags(): Tags;
    get telemetry(): Telemetry;
    get batches(): Batches;
    get voice(): Voice;
    get templates(): Templates;
    get clientSideAccessTokens(): ClientSideAccessTokens;
    get projects(): Projects;
}
